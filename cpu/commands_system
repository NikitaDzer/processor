DEFINE_COMMAND(push, 1, 1, {
    if (p_currentCommand->is_ram)
    {
       if (p_currentCommand->is_register)
          stack_push(&p_cpu->STACK, p_cpu->RAM[ (size_t)p_cpu->REGISTERS[ (size_t)p_currentCommand->argument ] ]);
       else
          stack_push(&p_cpu->STACK, p_cpu->RAM[ (size_t)p_currentCommand->argument ]);
    }
    else
    {
       if (p_currentCommand->is_register)
          stack_push(&p_cpu->STACK, p_cpu->REGISTERS[ (size_t)p_currentCommand->argument ]);
       else
          stack_push(&p_cpu->STACK, p_currentCommand->argument);
    }
})


DEFINE_COMMAND(pop, 2, 1, {
   if (p_currentCommand->is_ram)
   {
      if (p_currentCommand->is_register)
         stack_pop(&p_cpu->STACK, p_cpu->RAM + (size_t)p_cpu->REGISTERS[ (size_t)p_currentCommand->argument ]);
      else
         stack_pop(&p_cpu->STACK, p_cpu->RAM + (size_t)p_currentCommand->argument);
   }
   else
   {
      if (p_currentCommand->is_register)
         stack_pop(&p_cpu->STACK, p_cpu->REGISTERS + (size_t)p_currentCommand->argument);
      else
       kill
   }
})


DEFINE_COMMAND(sum, 3, 0, {
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS + 1);
    stack_push(&p_cpu->STACK, p_cpu->DARK_REGISTERS[0] + p_cpu->DARK_REGISTERS[1]);
})


DEFINE_COMMAND(mul, 4, 0, {
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS + 1);
    stack_push(&p_cpu->STACK, p_cpu->DARK_REGISTERS[0] * p_cpu->DARK_REGISTERS[1]);
})


DEFINE_COMMAND(in, 5, 0, {
   scanf("%lf", p_cpu->DARK_REGISTERS);
   stack_push(&p_cpu->STACK, p_cpu->DARK_REGISTERS[0]);
})


DEFINE_COMMAND(out, 6, 0, {
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);
    printf("%lg\n", p_cpu->DARK_REGISTERS[0]);
})


DEFINE_COMMAND(jmp, 7, -1, {
    p_currentCommand = commands + (size_t)p_currentCommand->argument;
    continue;
})


DEFINE_COMMAND(je, 8, -1, {
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS + 1);

    if (p_cpu->DARK_REGISTERS[0] == p_cpu->DARK_REGISTERS[1])
    {
        p_currentCommand = commands + (size_t)p_currentCommand->argument;
        continue;
    }
})


DEFINE_COMMAND(ja, 9, -1, {
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS + 1);

    if (p_cpu->DARK_REGISTERS[0] > p_cpu->DARK_REGISTERS[1])
    {
        p_currentCommand = commands + (size_t)p_currentCommand->argument;
        continue;
    }
})


DEFINE_COMMAND(hlt, 10, 0, {
    return 0;
})


DEFINE_COMMAND(call, 11, -1, {
    stack_push(&p_cpu->CALLSTACK, (double)(p_currentCommand + 1 - commands));

    p_currentCommand = commands + (size_t)p_currentCommand->argument;
    continue;
})


DEFINE_COMMAND(ret, 12, -2, {
    stack_pop(&p_cpu->CALLSTACK, p_cpu->DARK_REGISTERS);

    p_currentCommand = commands + (size_t)p_cpu->DARK_REGISTERS[0];
    continue;
})


DEFINE_COMMAND(sqrt, 13, 0, {
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);

    stack_push(&p_cpu->STACK, sqrt(p_cpu->DARK_REGISTERS[0]));
})


DEFINE_COMMAND(sub, 14, 0, {
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS + 1);

    stack_push(&p_cpu->STACK, p_cpu->DARK_REGISTERS[0] - p_cpu->DARK_REGISTERS[1]);
})


DEFINE_COMMAND(div, 15, 0, {
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS + 1);

    stack_push(&p_cpu->STACK, p_cpu->DARK_REGISTERS[0] / p_cpu->DARK_REGISTERS[1]);
})


DEFINE_COMMAND(pix, 16, 1, {

   if (p_currentCommand->is_ram)
   {
      if (p_currentCommand->is_register)
         p_cpu->DARK_REGISTERS[2] = p_cpu->RAM[ (size_t)p_cpu->REGISTERS[ (size_t)p_currentCommand->argument ] ];
      else
         p_cpu->DARK_REGISTERS[2] = p_cpu->RAM[ (size_t)p_currentCommand->argument ];
   }
   else if (p_currentCommand->is_register)
   {
      p_cpu->DARK_REGISTERS[2] = p_cpu->REGISTERS[ (size_t)p_currentCommand->argument ];
   }
   else
      p_cpu->DARK_REGISTERS[2] = p_currentCommand->argument;

    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS + 1);    // axis Y
    stack_pop(&p_cpu->STACK, p_cpu->DARK_REGISTERS);        // axis X

    p_cpu->VRAM[(size_t)p_cpu->DARK_REGISTERS[0] + (size_t)p_cpu->DARK_REGISTERS[1] * WINDOW_WIDTH]
                = (char)p_cpu->DARK_REGISTERS[2];
})


DEFINE_COMMAND(show, 17, 0, {
    for (size_t i = 0; i < WINDOW_HEIGHT; i++)
    {
        for (size_t j = 0; j < WINDOW_WIDTH; j++)
            printf("%c", p_cpu->VRAM[j + i * WINDOW_WIDTH]);

        printf("\n");
    }
})
